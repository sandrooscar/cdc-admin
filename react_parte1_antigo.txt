*** AULA01
Necessário ter o Node.js instalado na sua máquina, assim como o NPM, para poder subir o projeto usando o Create React App
jsx -> babel -> node -> webpack -> navegador

Sobre server-cdc-admin
-implementação para retornar os dados para aplicação react, desenvolvida em spring-boot.
-basta rodar o ServerCdcAdminApplicationpara disponibilizar o server.

*** AULA02

Não existe em nenhuma especificação css ou JS para importar CSS em js, isso é o webpack que faz.
Utilizamos o CSS simples do site https://purecss.io/ e copiamos os css que nos interessam para a pasta CSS.

Exemplo de importação de classe que não é exportada por default:

import { render } from '@testing-library/react';

Como o render não éo default do modulo react, é necessário utilizar as chaves.

COMO E REALIZADA A TRANSFORMACAO REACT JSX PARA JS
https://babeljs.io/docs/en/babel-plugin-transform-react-jsx/

*** AULA03 - Consumindo API e dando vida a nossa listagem
para instalar o módulo jquery como dependência do Node.js

npm install jquery --save

--A boa prática diz que o construtor é usado para inicializar as variáveis
constructor(){
    //inicializa as variáveis
}

--executado APÓS o render
componentDidMount(){
    //código executado depois do render
}

--executado ANTES do método render()
componentWillMount(){
    //código executado ates do render
}

Nas chamadas ASSSINCRONAS é nessário invocar o setstate para executar o render novamente, já que o componentWillMount NÂO fica aguardando a resposta

TODA VEZ QUE CHAMA O SETSTATE O MÉTODO RENDER É CHAMADO

* ciclo de vida do dom virtual

--executado depois da primeira renderização
componentDidMount(){
    //executado após primeira renderização
}

Entender o ciclo de vida do React é muito importante. São essas funções que te dão a chance de interagir com ele. 
Na maior parte da sua vida, você vai utilizar o render e o componentDidMount. 
Justamente porque em um você declara o componente em si e no outro você carrega o que pode ser necessário para ele. 
Entretanto, quando seu projeto evoluir e ficar maior, talvez surja a necessidade você ter que lidar com outras funções do ciclo de vida, 
como a shouldComponentUpdate. Ela indica para o React se seu componente deve ser renderizado e por default retorna true. 
Numa tela super complexa, evitar invocações desnecessárias para o render, pode fazer diferença.
Esses detalhes mais avançados, vão ficar para um segundo curso, ainda temos muito do básico do React para ver nesse primeiro curso!

*** AULA04 - Atualizando componentes

* Por default as funções declaradas dentro da classe não são linkadas com o this da classe, é preciso utilizar o bind para fazer esse link.
* toda a funcao JS é também um objeto, que possui a função bind onde pode ser informado qual this será usado lá dentro.

Porque esquecemos de chamar o bind e especificar que queremos trabalhar com o this do React.

** O this por default dentro do callback é o this do react, o bind diz que o diz a ser usado é o do react.

 Para que possamos ter acesso aos parâmetros passados pelo código que utiliza o componente, usamos a variável props, que já é disponibilizada 
 em toda classe que herda Component.

 Notificamos o React que uma verificação de atualização é necessária através da invocação da função setState. Nela passamos a propriedade que 
 já existe na variável state e também passamos o novo valor que deve ser associado a ela

*** AULA05
- O JSX exige que o modulo principal do react seja importado como React
- Hide order component: é criado um componente Box que interliga os componentes.
- Os argumentos que passamos para dentro de um componente ficam disponíveis na variável props, que possui um JSON criado dinamicamente.

** Publish subscriber desacoplamento
Vamos trocar a utilização do callback que funcione da seguinte forma:
"disparar um aviso geral de novaListagem disponivel".
Assim que quiser ouvir, ouve.
queremos que ele avise que aconteceu alguma coisa para os componentes que forem "interessados".
Na programação, chamamos de publisher, quem publica o aviso, e de subscriber quem se inscreve para recebe-lo. 
Para fazer isto, usaremos uma biblioteca que funciona tanto para JavaScript Client-side quanto para Server-side: o PubSubJS.
COMANDO:
npm install pubsub-js

PubSub.publish(novaListagem);
Informa que nossa listagem está disponivel. Vamos imaginar a seguinte situação, imagine que temos vários componentes na nossa 
aplicação que estão interessados em ouvir diversas mensagens, sobre diferentes assuntos. Pode ser sobre a nova listagem ou que um item foi removido. 
Além de publicarmos o objeto novo que está disponível para as pessoas manipularem, precisamos indicar qual é o canal, que costumamos chamar de tópico. 
Trata-se de um lugar que iremos disponibilizar a informação. O nosso, chamaremos de atualiza-lista-autores.

Ao cadastrarmos um novo autor, publicaremos no tópico que será ouvido por componentes interessados. Se alguém ficará interessado em ouvir, é um outro assunto... 
Logo após montarmos o componente do AutorBox, vamos adicionar o PubSub e vamos nos inscrever ao tópico atualiza-lista-autores. Quando chegar um objeto novo, 
precisaremos associar a uma função que será executada. Receberemos como argumento o canal que estamos escutando. Necessariamente, o primeiro argumento será o 
topico e o segundo, será o objeto que foi passado.